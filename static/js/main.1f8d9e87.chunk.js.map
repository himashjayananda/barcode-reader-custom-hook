{"version":3,"sources":["useBarcodeReader.js","App.js","reportWebVitals.js","index.js"],"names":["useBarcodeReader","useState","data","setData","error","setError","webcamRef","useRef","barcodeReader","useMemo","BrowserMultiFormatReader","captureInterval","capture","useCallback","imageSrc","current","getScreenshot","decodeFromImage","undefined","then","result","text","clearInterval","catch","err","message","useEffect","setInterval","BarcodeComponent","audio","width","height","ref","screenshotFormat","videoConstraints","facingMode","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAuDeA,EAnDU,WACvB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAYC,iBAAO,MACnBC,EAAgBC,mBAAQ,kBAAM,IAAIC,6BAA4B,IAC9DC,EAAkBJ,mBAElBK,EAAUC,uBAAY,WAC1B,IAAMC,EAAWR,EAAUS,SAAWT,EAAUS,QAAQC,gBACpDF,GACFN,EACGS,qBAAgBC,EAAWJ,GAC3BK,MAAK,SAAAC,GACJf,EAAS,IACTF,EAAQiB,EAAOC,MACfC,cAAcX,EAAgBI,YAE/BQ,OAAM,SAAAC,GACLnB,EAASmB,EAAIC,cAGlB,CAACjB,IAEJkB,qBAAU,WACHxB,IACHS,EAAgBI,QAAUY,YAAYf,EAAS,QAEhD,CAACV,EAAMU,IAiBV,MAAO,CACLV,OACAE,QACAwB,iBAlBuB,kBACvB,mCACE,cAAC,IAAD,CACEC,OAAO,EACPC,MAAO,IACPC,OAAQ,IACRC,IAAK1B,EACL2B,iBAAkB,YAClBC,iBAAkB,CAChBC,WAAY,sBC1BPC,MAdf,WACE,MAA0CpC,IAAlCE,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAAOwB,EAArB,EAAqBA,iBAErB,OACE,qBAAKS,UAAU,MAAf,SACE,sCACInC,GAAQ,cAAC0B,EAAD,IACV,4BAAI1B,IACJ,4BAAIE,UCEGkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1f8d9e87.chunk.js","sourcesContent":["import { useState, useCallback, useRef, useEffect, useMemo } from 'react';\r\nimport { BrowserMultiFormatReader } from '@zxing/library';\r\nimport Webcam from 'react-webcam';\r\n\r\nconst useBarcodeReader = () => {\r\n  const [data, setData] = useState('');\r\n  const [error, setError] = useState('');\r\n  const webcamRef = useRef(null);\r\n  const barcodeReader = useMemo(() => new BrowserMultiFormatReader(), []);\r\n  const captureInterval = useRef();\r\n\r\n  const capture = useCallback(() => {\r\n    const imageSrc = webcamRef.current && webcamRef.current.getScreenshot();\r\n    if (imageSrc) {\r\n      barcodeReader\r\n        .decodeFromImage(undefined, imageSrc)\r\n        .then(result => {\r\n          setError('');\r\n          setData(result.text);\r\n          clearInterval(captureInterval.current);\r\n        })\r\n        .catch(err => {\r\n          setError(err.message);\r\n        });\r\n    }\r\n  }, [barcodeReader]);\r\n\r\n  useEffect(() => {\r\n    if (!data) {\r\n      captureInterval.current = setInterval(capture, 100);\r\n    }\r\n  }, [data, capture]);\r\n\r\n  const BarcodeComponent = () => (\r\n    <>\r\n      <Webcam\r\n        audio={false}\r\n        width={480}\r\n        height={360}\r\n        ref={webcamRef}\r\n        screenshotFormat={'image/png'}\r\n        videoConstraints={{\r\n          facingMode: 'environment',\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    BarcodeComponent,\r\n  };\r\n};\r\n\r\nexport default useBarcodeReader;\r\n","import useBarcodeReader from './useBarcodeReader';\n\nfunction App() {\n  const { data, error, BarcodeComponent } = useBarcodeReader();\n\n  return (\n    <div className=\"App\">\n      <>\n        {!data && <BarcodeComponent />}\n        <p>{data}</p>\n        <p>{error}</p>\n      </>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}